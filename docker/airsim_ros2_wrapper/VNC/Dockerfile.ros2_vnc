# Optimized Dockerfile for AirSim ROS2 with VNC and Volume Mounting
# Features: Volume mounting for ros2 folder, proper default directory, development-friendly

# Build stage for ROS and AirSim ROS2
FROM ros:humble AS ros-airsim-builder

SHELL ["/bin/bash", "-c"]

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive \
    ROS_DISTRO=humble

# Install build dependencies in a single layer
RUN apt-get update && apt-get install -y \
    build-essential cmake git python3-pip \
    python3-colcon-common-extensions python3-vcstool python3-rosdep \
    python3-rosinstall-generator python3-wstool wget curl netcat-openbsd \
    libpcl-dev telnet iputils-ping net-tools \
    ros-humble-desktop ros-humble-cv-bridge ros-humble-image-transport \
    ros-humble-tf2-geometry-msgs ros-humble-tf2-sensor-msgs ros-humble-geographic-msgs \
    ros-humble-pcl-conversions ros-humble-pcl-ros ros-humble-geometry-msgs \
    ros-humble-sensor-msgs ros-humble-std-msgs ros-humble-nav-msgs \
    ros-humble-tf2 ros-humble-tf2-ros ros-humble-rclcpp ros-humble-rclpy \
    ros-humble-builtin-interfaces ros-humble-rosidl-default-generators \
    ros-humble-rosidl-default-runtime ros-humble-rclcpp-action \
    && apt-get install -y ros-humble-mavros-msgs || echo "mavros-msgs not available" \
    && rm -rf /var/lib/apt/lists/* && apt-get clean

# Initialize rosdep
RUN rosdep init || echo "rosdep already initialized" && rosdep update

# Create workspace structure (will be mounted as volume)
WORKDIR /airsim_ros2_ws
RUN mkdir -p src

# Copy non-ROS2 AirSim source files (paths relative to project root)
COPY cmake/ ./cmake/
COPY AirLib/include/ ./AirLib/include/
COPY AirLib/src/ ./AirLib/src/
COPY AirLib/deps/ ./AirLib/deps/
COPY MavLinkCom/src/ ./MavLinkCom/src/
COPY MavLinkCom/include/ ./MavLinkCom/include/
COPY MavLinkCom/common_utils/ ./MavLinkCom/common_utils/
COPY MavLinkCom/mavlink/ ./MavLinkCom/mavlink/
COPY external/rpclib/ ./external/rpclib/

# Copy our Docker-friendly CMake files
COPY cmake/cmake-modules/CommonSetupDocker.cmake ./cmake/cmake-modules/
COPY cmake/rpclib_wrapper/CMakeLists_docker.txt ./cmake/rpclib_wrapper/

# Create directory structure and cleanup
RUN mkdir -p src/airsim \
    && ln -sf /airsim_ros2_ws/cmake src/airsim/cmake \
    && ln -sf /airsim_ros2_ws/AirLib src/airsim/AirLib \
    && ln -sf /airsim_ros2_ws/MavLinkCom src/airsim/MavLinkCom \
    && ln -sf /airsim_ros2_ws/external src/airsim/external \
    && sed -i 's/add_subdirectory("MavLinkTest")/#add_subdirectory("MavLinkTest")/' /airsim_ros2_ws/cmake/MavLinkCom/CMakeLists.txt || true \
    && mv /airsim_ros2_ws/cmake/rpclib_wrapper/CMakeLists_docker.txt /airsim_ros2_ws/cmake/rpclib_wrapper/CMakeLists.txt

# Main stage
FROM ubuntu:22.04

SHELL ["/bin/bash", "-c"]

# Environment variables
ENV DEBIAN_FRONTEND=noninteractive \
    DISPLAY=:1 \
    VNC_PORT=5901 \
    RESOLUTION=1920x1080 \
    ROS_DISTRO=humble \
    ROS_VERSION=2 \
    USER=Aortz \
    PASSWD=ubuntu

# Install system packages
RUN apt-get update -q && apt-get install -y \
    supervisor tini curl wget gnupg2 lsb-release ca-certificates \
    build-essential vim nano sudo locales bash-completion tzdata \
    python3 python3-pip dos2unix git \
    telnet iputils-ping net-tools dnsutils netcat-openbsd \
    xfce4 xfce4-goodies tigervnc-standalone-server tigervnc-common tigervnc-tools \
    dbus-x11 x11-xserver-utils x11-utils xauth \
    xfonts-base xfonts-75dpi xfonts-100dpi fonts-liberation fonts-dejavu-core \
    openssh-server software-properties-common \
    && rm -rf /var/lib/apt/lists/* && apt-get clean

# Configure system
RUN mkdir -p /var/run/dbus /tmp/.X11-unix \
    && dbus-uuidgen > /etc/machine-id \
    && ln -sf /etc/machine-id /var/lib/dbus/machine-id \
    && chmod 1777 /tmp/.X11-unix

# Install ROS2 Humble
RUN curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg \
    && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(. /etc/os-release && echo $UBUNTU_CODENAME) main" | tee /etc/apt/sources.list.d/ros2.list > /dev/null \
    && apt-get update && apt-get install -y \
        ros-humble-desktop python3-rosdep python3-colcon-common-extensions python3-vcstool \
        ros-humble-geographic-msgs ros-humble-mavros-msgs ros-humble-rclcpp-action \
    && rosdep init || echo "rosdep already initialized" \
    && rosdep update && rm -rf /var/lib/apt/lists/* && apt-get clean

# Copy workspace structure from builder
COPY --from=ros-airsim-builder /airsim_ros2_ws /airsim_ros2_ws

# Create user and VNC setup
RUN useradd -m -s /bin/bash Aortz \
    && echo 'Aortz:ubuntu' | chpasswd \
    && usermod -aG sudo Aortz \
    && echo 'Aortz ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers \
    && mkdir -p /home/Aortz/.vnc \
    && echo 'Aortz' | vncpasswd -f > /home/Aortz/.vnc/passwd \
    && chmod 600 /home/Aortz/.vnc/passwd

# VNC configuration
RUN printf '#!/bin/bash\nunset SESSION_MANAGER DBUS_SESSION_BUS_ADDRESS\nexport DISPLAY=:1\n[ -x /usr/bin/dbus-launch ] && eval $(dbus-launch --sh-syntax --exit-with-session)\nxrdb $HOME/.Xresources 2>/dev/null || true\nxsetroot -solid grey 2>/dev/null || true\nstartxfce4 &\nwait\n' > /home/Aortz/.vnc/xstartup

RUN echo -e "session=xfce\ngeometry=1920x1080\nlocalhost=no\nalwaysshared=yes" > /home/Aortz/.vnc/config \
    && chmod +x /home/Aortz/.vnc/xstartup \
    && chown -R Aortz:Aortz /home/Aortz

# Create workspace directory and set proper permissions
RUN mkdir -p /airsim_ros2_ws/src \
    && chown -R Aortz:Aortz /airsim_ros2_ws

# Set up development environment
RUN echo -e "source /opt/ros/humble/setup.bash\nsource /airsim_ros2_ws/install/setup.bash 2>/dev/null || true\ncd /airsim_ros2_ws" >> /home/Aortz/.bashrc \
    && chown Aortz:Aortz /home/Aortz/.bashrc

# Create convenient aliases for development
RUN echo -e "alias ll='ls -alF'\nalias la='ls -A'\nalias l='ls -CF'\n# Fix permissions before building\nalias fix_perms='sudo chown -R \$USER:\$USER /airsim_ros2_ws/log /airsim_ros2_ws/build /airsim_ros2_ws/install /airsim_ros2_ws/src 2>/dev/null || true'\nalias build='fix_perms && colcon build --symlink-install'\nalias build_interfaces='fix_perms && colcon build --packages-select airsim_interfaces'\nalias build_pkgs='fix_perms && colcon build --packages-select airsim_ros_pkgs'\nalias source_ws='source install/setup.bash'\nalias clean_build='rm -rf build install log && colcon build --symlink-install'\n# Auto fix permissions when starting shell\nif [ -f /airsim_ros2_ws/fix_permissions.sh ]; then\n    /airsim_ros2_ws/fix_permissions.sh > /dev/null 2>&1\nfi" >> /home/Aortz/.bashrc

# Enhanced launch script with connectivity check
COPY docker/airsim_ros2_wrapper/VNC/launch_airsim_ros2.sh /launch_airsim_ros2.sh
RUN chmod +x /launch_airsim_ros2.sh \
    && cp /launch_airsim_ros2.sh /airsim_ros2_ws/launch_airsim_ros2.sh \
    && chmod +x /airsim_ros2_ws/launch_airsim_ros2.sh

# Copy colcon wrapper script and maintenance script
COPY docker/airsim_ros2_wrapper/VNC/colcon_wrapper.sh /usr/local/bin/colcon_wrapper
COPY docker/airsim_ros2_wrapper/VNC/maintenance.sh /usr/local/bin/maintenance
RUN chmod +x /usr/local/bin/colcon_wrapper /usr/local/bin/maintenance

# Create development helper scripts
RUN echo '#!/bin/bash\necho "Building AirSim ROS2 workspace..."\ncd /airsim_ros2_ws\n# Fix permissions first\nsudo chown -R $USER:$USER /airsim_ros2_ws/log /airsim_ros2_ws/build /airsim_ros2_ws/install /airsim_ros2_ws/src 2>/dev/null || true\nsource /opt/ros/humble/setup.bash\ncolcon build --symlink-install --packages-select airsim_interfaces airsim_ros_pkgs\necho "Build complete! Source the workspace with: source install/setup.bash"' > /build_workspace.sh \
    && chmod +x /build_workspace.sh

RUN echo '#!/bin/bash\necho "Rebuilding interfaces only..."\ncd /airsim_ros2_ws\n# Fix permissions first\nsudo chown -R $USER:$USER /airsim_ros2_ws/log /airsim_ros2_ws/build /airsim_ros2_ws/install /airsim_ros2_ws/src 2>/dev/null || true\nsource /opt/ros/humble/setup.bash\ncolcon build --symlink-install --packages-select airsim_interfaces\necho "Interfaces rebuilt! Source the workspace with: source install/setup.bash"' > /build_interfaces.sh \
    && chmod +x /build_interfaces.sh

# Environment variables for development
ENV PYTHONPATH="/opt/ros/humble/lib/python3.10/site-packages:/airsim_ros2_ws/install/airsim_interfaces/lib/python3.10/site-packages:/airsim_ros2_ws/install/airsim_ros_pkgs/lib/python3.10/site-packages:${PYTHONPATH}" \
    PATH="/opt/ros/humble/bin:/airsim_ros2_ws/install/airsim_ros_pkgs/bin:${PATH}" \
    LD_LIBRARY_PATH="/opt/ros/humble/lib:/airsim_ros2_ws/install/airsim_interfaces/lib:/airsim_ros2_ws/install/airsim_ros_pkgs/lib:${LD_LIBRARY_PATH}" \
    CMAKE_PREFIX_PATH="/opt/ros/humble:/airsim_ros2_ws/install/airsim_interfaces:/airsim_ros2_ws/install/airsim_ros_pkgs:${CMAKE_PREFIX_PATH}"

# Set working directory to the workspace (this is where VNC will start)
WORKDIR /airsim_ros2_ws

# Create volume mount point for ros2 source
VOLUME ["/airsim_ros2_ws/src"]

EXPOSE 5901 7400/udp 7401/udp 7402/udp

HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD pgrep -f "X.*vnc.*:1" > /dev/null || exit 1

COPY docker/airsim_ros2_wrapper/VNC/entrypoint_lightweight.sh /
RUN dos2unix /entrypoint_lightweight.sh && chmod +x /entrypoint_lightweight.sh

# Run the debug script
COPY docker/airsim_ros2_wrapper/VNC/debug_airsim_connection.sh /debug_airsim_connection.sh
RUN dos2unix /debug_airsim_connection.sh && chmod +x /debug_airsim_connection.sh

# Switch to user for final setup
USER Aortz

# Set user's default directory to workspace
RUN echo "cd /airsim_ros2_ws" >> /home/Aortz/.bashrc

# Switch back to root for entrypoint
USER root

# Run the entrypoint script 
ENTRYPOINT ["/entrypoint_lightweight.sh"] 